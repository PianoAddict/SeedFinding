using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Diagnostics;
using System.IO;

using SeedFinding.Cart;
using SeedFinding.Bundles;
using SeedFinding.Locations;

namespace SeedFinding
{
    class Program
    {
        static void Main(string[] args)
        {
            // do some speed testing before a long search
            bool runSpeedTest = false;
            // the optimal size for this will vary depending on your system
            int blockSize = 1 << 16;

            // run a search for a specific remix bundle set
            bool runRemixSearch = false;

            // search for a TAS vault seed that looks at both forage and cart bundles
            bool runVaultSearch = false;

            // search for a TAS vault seed that is just cart based
            bool runCartSearch = false;

            // search for a KrobusBulliten seed
            bool runKrobus = true;


            Console.WriteLine($"Start: {DateTime.Now}");
            if (runSpeedTest)
            {
                int numSeeds = 1 << 24;
                Console.WriteLine($"Estimating Remix Bundle Speed using {numSeeds} seeds");
                double time = RemixSeeding.Search(numSeeds, blockSize, out var _);
                Console.WriteLine($"Total Time: {time} (sps: {numSeeds / time})");
                Console.WriteLine($"Estimated +int32 Scan Time: {(Int32.MaxValue / (float)numSeeds) * time}");

                Console.WriteLine($"Estimating Cart Compute Speed using {numSeeds} seeds");
                time = VaultCartSeeding.Search(numSeeds, blockSize, out var _);
                Console.WriteLine($"Total Time: {time} (sps: {numSeeds / time})");
                Console.WriteLine($"Estimated +int32 Scan Time: {(Int32.MaxValue / (float)numSeeds) * time}");
            }

            if (runRemixSearch)
            {
                Console.WriteLine("RemixSearch");
                int numSeeds = Int32.MaxValue;
                double time = RemixSeeding.Search(numSeeds, blockSize, out List<int> validSeeds);
                foreach (var item in validSeeds)
                {
                    Console.WriteLine(item);
                }
                Console.WriteLine($"Total Time: {time} (sps: {numSeeds / time})");
            }

            if (runVaultSearch)
            {
                Console.WriteLine("TAS Vault Seed Searching");
                VaultSeeding.Run();
            }

            if (runCartSearch)
            {
                Console.WriteLine("Full cart seed search");
                int numSeeds = Int32.MaxValue;
                double time = VaultCartSeeding.Search(numSeeds, blockSize, out List<int> validSeeds);
                Console.WriteLine($"Total Time: {time} (sps: {numSeeds / time})");
            }

            if (runKrobus)
            {
                FileStream fs = new FileStream("Krobus.txt", FileMode.Create);
                // First, save the standard output.
                TextWriter tmp = Console.Out;
                StreamWriter sw = new StreamWriter(fs);
                Console.SetOut(sw);
                bool reportMode = false;
                if (reportMode)
                {
                    List<int> seeds = new List<int> { 15217909, 18822987, 21258137, 21612201, 26016911, 27044633, 29833847, 36725925, 39853105, 40542861, 42480225, 44257815, 47047029, 53543303, 54966829, 56332517, 60737227, 70756485, 74573421, 78978131, 80841605, 89687145, 93504081, 96309393, 114550297, 137407903, 138561599, 145453677, 145629549, 148242891, 149270613, 152059827, 163886551, 167527615, 172128219, 182963207, 186552187, 189341401, 193158337, 194773833, 197563047, 200368359, 208626125, 213030835, 224061717, 227894751, 230683965, 232283363, 249614625, 264038593, 266827807, 267855529, 268797367, 271586581, 279828249, 286896199, 287022173, 288049895, 298758909, 305137103, 306306897, 307334619, 339857419, 350884377, 354525441, 365410327, 372958315, 374577735, 385604693, 387382283, 388393907, 392034971, 395623951, 398413165, 402230101, 402817875, 403845597, 403861695, 413880953, 417343825, 417697889, 422102599, 428724847, 429316545, 433133481, 436628549, 437538191, 448247205, 448601269, 452418205, 462401343, 473110357, 473910123, 476927293, 477869131, 491367359, 492395081, 497121659, 504189609, 504013737, 506802951, 507830673, 514208867, 518613577, 522430513, 527115397, 540687515, 545112247, 547901461, 548929183, 551396529, 557150829, 559956141, 568213907, 571590895, 572618617, 583649499, 596454047, 603667993, 607163061, 611889639, 622598653, 623980439, 623626375, 626415589, 627357427, 630146641, 631174363, 638388309, 641883377, 642205245, 645700313, 657318969, 663697163, 664724885, 675559873, 676603693, 678365185, 682182121, 682981887, 694008845, 698417479, 702234415, 713085501, 713885267, 716902437, 717702203, 719463695, 727685341, 728729161, 738748419, 742211291, 742565355, 745942343, 749759279, 754184011, 758000947, 758588721, 760468293, 762405657, 772441013, 773468735, 780662659, 781690381, 792399395, 801708875, 816234825, 825402233, 831670417, 832698139, 835487353, 836429191, 847138205, 850955141, 861738045, 866390733, 872768927, 873796649, 885675457, 888236715, 892053651, 896458361, 900275297, 903672307, 904700029, 907489243, 922957031, 926773967, 931178677, 942209559, 947466119, 947820183, 951283055, 955014107, 956041829, 958831043, 963255775, 965723121, 966750843, 967660485, 981512777, 982186435, 982540499, 985917487, 989734423, 1000427339, 1000443437, 1001471159, 1004032417, 1007849353, 1018684341, 1022257223, 1040742181, 1041541947, 1042569669, 1056209969, 1060026905, 1074450873, 1097308479, 1100771351, 1101125415, 1101713189, 1104502403, 1105530125, 1113771793, 1116239139, 1120056075, 1123787127, 1132028795, 1135491667, 1140250441, 1150269699, 1150959455, 1153058913, 1156537883, 1157463623, 1168526701, 1172005671, 1174794885, 1191258199, 1193035789, 1196016973, 1198806187, 1206725987, 1209515201, 1213230155, 1220298105, 1227756105, 1228539773, 1232356709, 1243399765, 1244007561, 1246796775, 1247824497, 1250613711, 1255018421, 1258835357, 1262476421, 1279881573, 1299757995, 1303574931, 1306380243, 1307979641, 1313574167, 1314601889, 1317391103, 1319042719, 1325310903, 1332858891, 1346341021, 1355524527, 1359341463, 1360031219, 1361808809, 1365609647, 1366409413, 1367563109, 1374455187, 1377244401, 1378272123, 1382003175, 1383866649, 1385820111, 1396529125, 1401129729, 1405088737, 1415553697, 1418342911, 1429369869, 1433010933, 1440078883, 1448654593, 1454090949, 1459685475, 1461300971, 1464090185, 1474109443, 1477926379, 1478616135, 1482331089, 1483374909, 1493040103, 1493394167, 1497798877, 1500588091, 1508829759, 1509857481, 1512646695, 1517051405, 1527760419, 1528114483, 1531577355, 1534382667, 1551595849, 1552623571, 1570880573, 1571664241, 1575481177, 1582675101, 1586316165, 1587343887, 1593738179, 1598142889, 1601783953, 1605600889, 1627414675, 1628442397, 1638441633, 1642882463, 1643910185, 1646699399, 1650178369, 1651104109, 1653909421, 1656698635, 1657726357, 1658318055, 1683181207, 1687585917, 1702111867, 1705928803, 1706870641, 1709659855, 1710687577, 1714084587, 1717579655, 1717901523, 1721396591, 1724969473, 1736832183, 1743210377, 1756116907, 1758678165, 1761695335, 1761467379, 1773522059, 1777930693, 1791570993, 1792598715, 1793398481, 1795387929, 1797215417, 1807214653, 1817233911, 1817907569, 1825455557, 1832669503, 1833697225, 1836164571, 1841918871, 1849165013, 1851600163, 1851954227, 1852981949, 1855417099, 1855771163, 1856358937, 1860175873, 1866798121, 1867389819, 1870884887, 1871912609, 1886320479, 1891931103, 1895748039, 1907366695, 1911183631, 1923010355, 1926651419, 1929440633, 1930468355, 1942087011, 1945903947, 1952282141, 1957730671, 1967749929, 1970539143, 1971566865, 1972154639, 1974943853, 1975971575, 1978760789, 1983185521, 1987002457, 2002470245, 2010691891, 2025951611, 2034527321, 2042768989, 2045236335, 2046264057, 2057882713, 2060671927, 2061699649, 2065430701, 2069247637, 2076139715, 2079956651, 2095392243, 2095746307, 2101002867, 2102798159, 2117238225, 2120255395, 2121055161, 2132082119, 2135723183 };
                    string output = "";
                    foreach (int seed in seeds)
                    {
                        KrobusBullitenSeeding.CheckSeed(seed);
                    }
                }
                if (!reportMode) {
                    Console.WriteLine("Full cart seed search");
                    int numSeeds = Int32.MaxValue;
                    double time = KrobusBullitenSeeding.Search(numSeeds, blockSize, out List<string> validSeeds);
                    Console.WriteLine($"Total Time: {time} (sps: {numSeeds / time})"); 
                }


                Console.SetOut(tmp);
                sw.Close();
            }
        }
    }
}

